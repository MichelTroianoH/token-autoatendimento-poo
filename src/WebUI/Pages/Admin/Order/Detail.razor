@page "/admin/order/detail/{Code}"

@inject OrderCommand OrderCommand 

<h1>Details</h1>

<div class="row">
    <div class="col-12">
        <form class="needs-validation" novalidate="">
            <div class="row">
                <div class="col-3 mb-3">
                    <label>Id</label>
                    <input type="text" class="form-control" value="@(_order?.Id)" readonly="">
                </div>
                <div class="col-3 mb-3">
                    <label>Codigo</label>
                    <input type="text" class="form-control" value="@(_order?.Code)" readonly="">
                </div>
                <div class="col-3 mb-3">
                    <label>Valor total</label>
                    <input type="text" class="form-control" value="@(Currency.StringFormat(_order == null ? 0 : _order.TotalValue))" readonly="">
                </div>
            </div>
            <div class="row">
                <div class="col-3 mb-3">
                    <label>Observação</label>
                    <input type="text" class="form-control" value="@(_order?.Obs)" readonly="">
                </div>
                <div class="col-3 mb-3">
                    <label>Status</label>
                    <input type="text" class="form-control" value="@(_order?.Status)" readonly="">
                </div>
                <div class="col-3 mb-3">
                    <label>Data</label>
                    <input type="text" class="form-control" value="@(_order.Created.ToShortDateString())" readonly="">
                </div>
            </div>
        </form>
    </div>
</div>

@code{

    [Parameter]
    public string? Code { get; set; }

    private Order? _order;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Code))
            _order = await OrderCommand.GetAsync(Convert.ToInt32(Code));
    }

}